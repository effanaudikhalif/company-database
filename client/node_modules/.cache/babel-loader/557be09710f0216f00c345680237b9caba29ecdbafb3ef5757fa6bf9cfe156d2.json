{"ast":null,"code":"var _jsxFileName = \"/Users/effanaudikhalif/Desktop/CAST/company-internal/client/src/components/UpdateBranch.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport BranchFinder from \"../api/BranchFinder\"; // Ensure this import is correct\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst UpdateBranch = () => {\n  _s();\n  const {\n    branchID\n  } = useParams();\n  const [branchName, setBranchName] = useState(\"\");\n  const [managerID, setManagerID] = useState(\"\");\n  useEffect(() => {\n    const fetchBranch = async () => {\n      try {\n        if (branchID) {\n          // Fetching data without duplicating 'branch' in the URL\n          const response = await BranchFinder.get(`/${branchID}`);\n          if (response.data) {\n            setBranchName(response.data.branch_name);\n            setManagerID(response.data.manager_id);\n          }\n        }\n      } catch (err) {\n        console.error(\"Error fetching branch details:\", err);\n      }\n    };\n    fetchBranch();\n  }, [branchID]); // Dependency array includes branchID to re-run effect when it changes\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-group\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"branchName\",\n          children: \"Branch Name\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 32,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          value: branchName,\n          onChange: e => setBranchName(e.target.value),\n          id: \"branchName\",\n          className: \"form-control\",\n          type: \"text\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 33,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-group\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"managerID\",\n          children: \"Manager ID\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          value: managerID,\n          onChange: e => setManagerID(e.target.value),\n          id: \"managerID\",\n          className: \"form-control\",\n          type: \"number\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 29,\n    columnNumber: 5\n  }, this);\n};\n_s(UpdateBranch, \"bY1saHdGo+cgHOowgsAagDJ/zsc=\", false, function () {\n  return [useParams];\n});\n_c = UpdateBranch;\nexport default UpdateBranch;\nvar _c;\n$RefreshReg$(_c, \"UpdateBranch\");","map":{"version":3,"names":["React","useState","useEffect","useParams","BranchFinder","jsxDEV","_jsxDEV","UpdateBranch","_s","branchID","branchName","setBranchName","managerID","setManagerID","fetchBranch","response","get","data","branch_name","manager_id","err","console","error","className","children","htmlFor","fileName","_jsxFileName","lineNumber","columnNumber","value","onChange","e","target","id","type","_c","$RefreshReg$"],"sources":["/Users/effanaudikhalif/Desktop/CAST/company-internal/client/src/components/UpdateBranch.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport BranchFinder from \"../api/BranchFinder\"; // Ensure this import is correct\n\nconst UpdateBranch = () => {\n  const { branchID } = useParams();\n  const [branchName, setBranchName] = useState(\"\");\n  const [managerID, setManagerID] = useState(\"\");\n\n  useEffect(() => {\n    const fetchBranch = async () => {\n      try {\n        if (branchID) {\n          // Fetching data without duplicating 'branch' in the URL\n          const response = await BranchFinder.get(`/${branchID}`);\n          if (response.data) {\n            setBranchName(response.data.branch_name);\n            setManagerID(response.data.manager_id);\n          }\n        }\n      } catch (err) {\n        console.error(\"Error fetching branch details:\", err);\n      }\n    };\n    fetchBranch();\n  }, [branchID]); // Dependency array includes branchID to re-run effect when it changes\n\n  return (\n    <div className=\"container\">\n      <form>\n        <div className=\"form-group\">\n          <label htmlFor=\"branchName\">Branch Name</label>\n          <input\n            value={branchName}\n            onChange={e => setBranchName(e.target.value)}\n            id=\"branchName\"\n            className=\"form-control\"\n            type=\"text\"\n          />\n        </div>\n        <div className=\"form-group\">\n          <label htmlFor=\"managerID\">Manager ID</label>\n          <input\n            value={managerID}\n            onChange={e => setManagerID(e.target.value)}\n            id=\"managerID\"\n            className=\"form-control\"\n            type=\"number\"\n          />\n        </div>\n        {/* Submit button should be added only when needed */}\n      </form>\n    </div>\n  );\n};\n\nexport default UpdateBranch;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}